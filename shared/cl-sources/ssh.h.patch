--- ssh.h.orig	2012-10-25 01:37:58.000000000 +0200
+++ ssh.h	2020-07-07 11:21:15.627239000 +0200
@@ -196,6 +196,9 @@
 #define SSH_MSG_USERAUTH_FAILURE 51 /* Authentication failed */
 #define SSH_MSG_USERAUTH_SUCCESS 52 /* Authentication succeeded */
 #define SSH_MSG_USERAUTH_BANNER 53	/* No-op */
+#ifdef KPYM_HACK
+#define SSH_MSG_USERAUTH_PK_OK 60	/* publick key authentication handshake */
+#endif
 #define SSH_MSG_USERAUTH_INFO_REQUEST 60 /* Generic auth.svr.request */
 #define SSH_MSG_USERAUTH_INFO_RESPONSE 61 /* Generic auth.cli.response */
 #define SSH_MSG_GLOBAL_REQUEST	80	/* Perform a global ioctl */
@@ -283,6 +286,9 @@
    64-bit-only) hash algorithm for each of the curves.  Because of this the 
    values for P384/P512 are defined below, but disabled in the code */
 
+#ifdef KPYM_HACK
+#define CRYPT_PSEUDOALGO_PUBLICKEY	( CRYPT_ALGO_LAST_CONVENTIONAL - 5 )
+#endif
 #define CRYPT_PSEUDOALGO_DHE		( CRYPT_ALGO_LAST_CONVENTIONAL - 9 )
 #define CRYPT_PSEUDOALGO_DHE_ALT	( CRYPT_ALGO_LAST_CONVENTIONAL - 8 )
 #define CRYPT_PSEUDOALGO_ECDH_P384	( CRYPT_ALGO_LAST_CONVENTIONAL - 7 )
@@ -302,11 +308,15 @@
 
 /* Check whether an algorithm ID is one of the above pseudo-algorithm
    types */
-
+#ifdef KPYM_HACK
+#define isPseudoAlgo( algorithm ) \
+		( ( algorithm >= CRYPT_PSEUDOALGO_DHE && \
+		  algorithm <= CRYPT_PSEUDOALGO_PAM ) || ( algorithm == CRYPT_PSEUDOALGO_PUBLICKEY ) )
+#else
 #define isPseudoAlgo( algorithm ) \
 		( algorithm >= CRYPT_PSEUDOALGO_DHE && \
 		  algorithm <= CRYPT_PSEUDOALGO_PAM )
-
+#endif
 /* When working with SSH channels there are a number of SSH-internal
    attributes that aren't exposed as cryptlib-wide attribute types.  The
    following values are used to access SSH-internal channel attributes */
@@ -343,7 +353,18 @@
    are more like cipher suites, in order to check whether they're available
    for use we have to map the suite pseudo-value into one or more actual
    algorithms, which are given via the checkXXXAlgo values */
+#ifdef KPYM_HACK
+typedef struct {
+	BUFFER_FIXED( nameLen ) \
+	char FAR_BSS *name;				/* Algorithm name */
+	int nameLen;
+	CRYPT_ALGO_TYPE algo;				/* Algorithm ID */
 
+	/* Optional parameters needed to check for algorithm availability
+	   when the algorithm actually represents a cipher suite */
+	CRYPT_ALGO_TYPE checkCryptAlgo, checkHashAlgo;
+	} ALGO_STRING_INFO;
+#else
 typedef struct {
 	/* Mapping from algorithm name to cryptlib algorithm ID */
 	BUFFER_FIXED( nameLen ) \
@@ -355,7 +376,7 @@
 	   when the algorithm actually represents a cipher suite */
 	const CRYPT_ALGO_TYPE checkCryptAlgo, checkHashAlgo;
 	} ALGO_STRING_INFO;
-
+#endif
 /* SSH handshake state information.  This is passed around various
    subfunctions that handle individual parts of the handshake */
 
