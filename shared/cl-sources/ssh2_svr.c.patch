--- ssh2_svr.c.orig	2011-04-14 18:05:42.000000000 +0200
+++ ssh2_svr.c	2020-07-07 16:59:53.871433000 +0200
@@ -24,7 +24,178 @@
 *								Utility Functions							*
 *																			*
 ****************************************************************************/
+#ifdef KPYM_HACK
+int typeSize(const CRYPT_ALGO_TYPE t[]);
+static CRYPT_ALGO_TYPE algoKeyexList[] = {
+	CRYPT_PSEUDOALGO_DHE_ALT, CRYPT_PSEUDOALGO_DHE, CRYPT_ALGO_DH, 
+	CRYPT_ALGO_NONE, CRYPT_ALGO_NONE 
+};
+static CRYPT_ALGO_TYPE algoEncrList[] = {
+	CRYPT_ALGO_3DES, CRYPT_ALGO_AES, CRYPT_ALGO_BLOWFISH, 
+	CRYPT_ALGO_NONE, CRYPT_ALGO_NONE
+};
+static CRYPT_ALGO_TYPE algoMACList[] = {
+	CRYPT_ALGO_HMAC_SHA2, CRYPT_ALGO_HMAC_SHA1, CRYPT_ALGO_HMAC_MD5, 
+	CRYPT_ALGO_NONE, CRYPT_ALGO_NONE 
+};
+
+ALGO_STRING_INFO FAR_BSS algoStringKeyexTbl[] = {
+#ifdef PREFER_ECC_SUITES
+	{ "ecdh-sha2-nistp256", 18, CRYPT_ALGO_ECDH,
+	  CRYPT_ALGO_ECDH, CRYPT_ALGO_SHA2 },
+#endif // PREFER_ECC_SUITES 
+	{ "diffie-hellman-group-exchange-sha256", 36, CRYPT_PSEUDOALGO_DHE_ALT,
+	  CRYPT_ALGO_DH, CRYPT_ALGO_SHA2 },
+	{ "diffie-hellman-group-exchange-sha1", 34, CRYPT_PSEUDOALGO_DHE,
+	  CRYPT_ALGO_DH },
+	{ "diffie-hellman-group1-sha1", 26, CRYPT_ALGO_DH },
+#if !defined( PREFER_ECC_SUITES ) 
+	{ "ecdh-sha2-nistp256", 18, CRYPT_ALGO_ECDH,
+	  CRYPT_ALGO_ECDH, CRYPT_ALGO_SHA2 },
+#endif // !PREFER_ECC_SUITES 
+	{ NULL, 0, CRYPT_ALGO_NONE }, { NULL, 0, CRYPT_ALGO_NONE }
+};
+
+#define algoStringEncrTblClient algoStringEncrTbl
+#define algoStringEncrTblServer algoStringEncrTbl
+ALGO_STRING_INFO FAR_BSS algoStringEncrTbl[] = {
+	{ "3des-cbc", 8, CRYPT_ALGO_3DES },
+	{ "aes128-cbc", 10, CRYPT_ALGO_AES },
+	{ "blowfish-cbc", 12, CRYPT_ALGO_BLOWFISH },
+	{ NULL, 0, CRYPT_ALGO_NONE }, { NULL, 0, CRYPT_ALGO_NONE }
+};
+ALGO_STRING_INFO FAR_BSS algoStringMACTbl[] = {
+	{ "hmac-sha2-256", 13, CRYPT_ALGO_HMAC_SHA2 },
+	{ "hmac-sha1", 9, CRYPT_ALGO_HMAC_SHA1 },
+	{ "hmac-md5", 8, CRYPT_ALGO_HMAC_MD5 },
+	{ NULL, 0, CRYPT_ALGO_NONE }, { NULL, 0, CRYPT_ALGO_NONE }
+};
+
+const ALGO_STRING_INFO cryptAlgoInfoFromString( const char * str )
+{
+	static const ALGO_STRING_INFO FAR_BSS table[] = {
+		{ "ssh-rsa", 7, CRYPT_ALGO_RSA },
+		{ "ssh-dss", 7, CRYPT_ALGO_DSA },
+		{ "3des-cbc", 8, CRYPT_ALGO_3DES },
+		{ "aes128-cbc", 10, CRYPT_ALGO_AES },
+		{ "blowfish-cbc", 12, CRYPT_ALGO_BLOWFISH },
+//		{ "cast128-cbc", 11, CRYPT_ALGO_CAST },
+		{ "idea-cbc", 8, CRYPT_ALGO_IDEA },
+		{ "arcfour", 7, CRYPT_ALGO_RC4 },
+		{ "diffie-hellman-group-exchange-sha1", 34, CRYPT_PSEUDOALGO_DHE },
+		{ "diffie-hellman-group-exchange-sha256", 36, CRYPT_PSEUDOALGO_DHE_ALT },
+		{ "diffie-hellman-group1-sha1", 26, CRYPT_ALGO_DH },
+		{ "hmac-sha1", 9, CRYPT_ALGO_HMAC_SHA },
+		{ "hmac-md5", 8, CRYPT_ALGO_HMAC_MD5 },
+		{ "password", 8, CRYPT_PSEUDOALGO_PASSWORD },
+		{ NULL, 0, CRYPT_ALGO_NONE }
+		};
+	static const ALGO_STRING_INFO none = { NULL, 0, CRYPT_ALGO_NONE };
+	int i = 0;
 
+	for( i = 0; table[ i ].algo != CRYPT_ALGO_NONE; i++ )
+	{
+		if( strcmp(str, table[i].name) == 0 ) return table[ i ];
+	}
+	return none;
+}
+
+const ALGO_STRING_INFO cryptAlgoInfoFromAlgo( int algo )
+{
+	static const ALGO_STRING_INFO FAR_BSS table[] = {
+		{ "ssh-rsa", 7, CRYPT_ALGO_RSA },
+		{ "ssh-dss", 7, CRYPT_ALGO_DSA },
+		{ "3des-cbc", 8, CRYPT_ALGO_3DES },
+		{ "aes128-cbc", 10, CRYPT_ALGO_AES },
+		{ "blowfish-cbc", 12, CRYPT_ALGO_BLOWFISH },
+//		{ "cast128-cbc", 11, CRYPT_ALGO_CAST },
+		{ "idea-cbc", 8, CRYPT_ALGO_IDEA },
+		{ "arcfour", 7, CRYPT_ALGO_RC4 },
+		{ "diffie-hellman-group-exchange-sha1", 34, CRYPT_PSEUDOALGO_DHE },
+		{ "diffie-hellman-group1-sha1", 26, CRYPT_ALGO_DH },
+		{ "hmac-sha1", 9, CRYPT_ALGO_HMAC_SHA },
+		{ "hmac-md5", 8, CRYPT_ALGO_HMAC_MD5 },
+		{ "password", 8, CRYPT_PSEUDOALGO_PASSWORD },
+		{ NULL, 0, CRYPT_ALGO_NONE }
+		};
+	static const ALGO_STRING_INFO none = { NULL, 0, CRYPT_ALGO_NONE };
+	int i = 0;
+
+	for( i = 0; table[ i ].algo != CRYPT_ALGO_NONE; i++ )
+	{
+		if( algo == table[ i ].algo ) return table[ i ];
+	}
+	return none;
+}
+
+C_RET cryptAlgoFromString( const char * str )
+{
+	return cryptAlgoInfoFromString( str ).algo;
+}
+
+C_RET cryptSetAlgoList( const int * list, int len, int type )
+{
+	int i = 0;
+	if( type == KEYEX_ALGO_LIST )
+	{
+		//algoKeyexList
+		for( i = 0; i < len && i < 2; i++ )
+		{
+			algoKeyexList[i] = list[i];
+			algoStringKeyexTbl[i] = cryptAlgoInfoFromAlgo( list[i] );
+		}
+		algoKeyexList[i] = CRYPT_ALGO_NONE;
+		algoKeyexList[i + 1] = CRYPT_ALGO_NONE;
+		algoStringKeyexTbl[i] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+		algoStringKeyexTbl[i + 1] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+	}
+	if( type == ENCR_ALGO_LIST )
+	{
+		//algoEncrList
+		for( i = 0; i < len && i < 5; i++ )
+		{
+			algoEncrList[i] = list[i];
+			algoStringEncrTblClient[i] = cryptAlgoInfoFromAlgo( list[i] );
+			algoStringEncrTblServer[i] = cryptAlgoInfoFromAlgo( list[i] );
+		}
+		algoEncrList[i] = CRYPT_ALGO_NONE;
+		algoEncrList[i + 1] = CRYPT_ALGO_NONE;
+		algoStringEncrTblClient[i] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+		algoStringEncrTblClient[i + 1] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+		algoStringEncrTblServer[i] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+		algoStringEncrTblServer[i + 1] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+	}
+	if( type == MAC_ALGO_LIST )
+	{
+		//algoMACList
+		for( i = 0; i < len && i < 2; i++ )
+		{
+			algoMACList[i] = list[i];
+			algoStringMACTbl[i] = cryptAlgoInfoFromAlgo( list[i] );
+		}
+		algoMACList[i] = CRYPT_ALGO_NONE;
+		algoMACList[i + 1] = CRYPT_ALGO_NONE;
+		algoStringMACTbl[i] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+		algoStringMACTbl[i + 1] = cryptAlgoInfoFromAlgo( CRYPT_ALGO_NONE );
+	}
+
+	return 0;
+}
+
+static const CRYPT_ALGO_TYPE FAR_BSS algoStringUserauthentList[] = {
+	  CRYPT_PSEUDOALGO_PASSWORD
+	, CRYPT_PSEUDOALGO_PUBLICKEY
+	, CRYPT_ALGO_NONE, CRYPT_ALGO_NONE };
+static const CRYPT_ALGO_TYPE FAR_BSS algoKeyexEccList[] = {
+#ifdef PREFER_ECC_SUITES
+	CRYPT_ALGO_ECDH,
+#endif /* PREFER_ECC_SUITES */
+	CRYPT_PSEUDOALGO_DHE_ALT, CRYPT_PSEUDOALGO_DHE, CRYPT_ALGO_DH,
+#if !defined( PREFER_ECC_SUITES )
+	CRYPT_ALGO_ECDH,
+#endif /* !PREFER_ECC_SUITES */
+	CRYPT_ALGO_NONE, CRYPT_ALGO_NONE };
+#else
 /* SSH algorithm names sent to the client, in preferred algorithm order.
    Since we have a fixed algorithm for our public key (determined by the key
    type) we only send a single value for this that's evaluated at runtime, 
@@ -55,7 +226,16 @@
 static const CRYPT_ALGO_TYPE FAR_BSS algoMACList[] = {
 	CRYPT_ALGO_HMAC_SHA2, CRYPT_ALGO_HMAC_SHA1, CRYPT_ALGO_HMAC_MD5, 
 	CRYPT_ALGO_NONE, CRYPT_ALGO_NONE };
+#endif
 
+#ifdef KPYM_HACK
+static SSH_HANDSHAKE_INFO * ke_handshakeInfo = NULL;
+char ke_client_id[1000] = {0};
+BYTE ke_sessionID[ CRYPT_MAX_HASHSIZE + 16 ];
+int ke_sessionIDLength = -1;
+char ke_publickey[ 5000 + 2 ];
+int ke_publickey_len = -1;
+#endif
 /* Encode a list of available algorithms */
 
 CHECK_RETVAL STDC_NONNULL_ARG( ( 1, 2 ) ) \
@@ -103,8 +283,9 @@
 				algoStringInfoTbl[ i ].algo != cryptAlgo && \
 				i < noAlgoStringInfoEntries; i++ );
 		ENSURES( i < noAlgoStringInfoEntries );
-		ENSURES( algoStringInfoTbl[ i ].algo != CRYPT_ALGO_NONE && \
-				 noAlgos >= 0 && noAlgos < 16 );
+		ENSURES( algoStringInfoTbl[i].algo != CRYPT_ALGO_NONE ); 
+		ENSURES( noAlgos >= 0 );
+		ENSURES( noAlgos < 16 );
 		algoStringInfo = &algoStringInfoTbl[ i ];
 
 		/* If it's a cipher suite, make sure that the algorithms that it's
@@ -437,6 +618,10 @@
 	status = hashAsString( handshakeInfo->iExchangeHashContext,
 						   sessionInfoPtr->receiveBuffer,
 						   strlen( sessionInfoPtr->receiveBuffer ) );
+#ifdef KPYM_HACK
+	if( strlen( sessionInfoPtr->receiveBuffer ) < sizeof( ke_client_id ) )
+		strcpy_s( ke_client_id, sizeof( ke_client_id ), sessionInfoPtr->receiveBuffer );
+#endif
 	if( cryptStatusOK( status ) )
 		status = hashAsString( handshakeInfo->iExchangeHashContext, 
 							   SSH2_ID_STRING, SSH_ID_STRING_SIZE );
@@ -536,34 +721,58 @@
 		if( cryptStatusOK( status ) && isEccAlgo( pkcAlgo ) )
 			{
 			status = writeAlgoList( &stream, algoKeyexEccList,
+#ifdef KPYM_HACK
+							typeSize(algoKeyexEccList));
+#else
 									FAILSAFE_ARRAYSIZE( algoKeyexEccList, \
 														CRYPT_ALGO_TYPE ) );
+#endif
 			}
 		else
 			{
 			status = writeAlgoList( &stream, algoKeyexList,
+#ifdef KPYM_HACK
+							typeSize(algoKeyexList));
+#else
 									FAILSAFE_ARRAYSIZE( algoKeyexList, \
 														CRYPT_ALGO_TYPE ) );
+#endif
 			}
 		}
 	if( cryptStatusOK( status ) )
 		status = writeAlgoString( &stream, handshakeInfo->pubkeyAlgo );
 	if( cryptStatusOK( status ) )
 		status = writeAlgoList( &stream, algoEncrList,
+#ifdef KPYM_HACK
+								typeSize(algoEncrList));
+#else
 								FAILSAFE_ARRAYSIZE( algoEncrList, \
 													CRYPT_ALGO_TYPE ) );
+#endif
 	if( cryptStatusOK( status ) )
 		status = writeAlgoList( &stream, algoEncrList,
+#ifdef KPYM_HACK
+								typeSize(algoEncrList));
+#else
 								FAILSAFE_ARRAYSIZE( algoEncrList, \
 													CRYPT_ALGO_TYPE ) );
+#endif
 	if( cryptStatusOK( status ) )
 		status = writeAlgoList( &stream, algoMACList,
+#ifdef KPYM_HACK
+								typeSize(algoMACList));
+#else
 								FAILSAFE_ARRAYSIZE( algoMACList, \
 													CRYPT_ALGO_TYPE ) );
+#endif
 	if( cryptStatusOK( status ) )
 		status = writeAlgoList( &stream, algoMACList,
+#ifdef KPYM_HACK
+								typeSize(algoMACList));
+#else
 								FAILSAFE_ARRAYSIZE( algoMACList, \
 													CRYPT_ALGO_TYPE ) );
+#endif
 	if( cryptStatusOK( status ) )
 		status = writeAlgoString( &stream, CRYPT_PSEUDOALGO_COPR );
 	if( cryptStatusOK( status ) )
@@ -808,6 +1017,10 @@
 	/* Complete phase 2 of the DH key agreement process to obtain the shared
 	   secret value */
 	status = completeKeyex( sessionInfoPtr, handshakeInfo, TRUE );
+#ifdef KPYM_HACK
+	memcpy(ke_sessionID, handshakeInfo->sessionID, sizeof(handshakeInfo->sessionID));
+	ke_sessionIDLength = handshakeInfo->sessionIDlength;
+#endif
 	if( cryptStatusError( status ) )
 		return( status );
 
@@ -872,6 +1085,509 @@
 	return( CRYPT_OK );
 	}
 
+#ifdef KPYM_HACK
+
+int processClientKexinit( SESSION_INFO *sessionInfoPtr, SSH_HANDSHAKE_INFO *handshakeInfo, STREAM stream );
+
+int ke_SSH2_MSG_KEXINIT( SESSION_INFO *sessionInfoPtr, STREAM * stream )
+{
+	
+	int status;
+	SESSION_INFO si;
+	static const ALGO_STRING_INFO FAR_BSS algoStringPubkeyRSATbl[] = {
+		{ "ssh-rsa", 7, CRYPT_ALGO_RSA },
+		{ NULL, 0, CRYPT_ALGO_NONE }
+		};
+	static const ALGO_STRING_INFO FAR_BSS algoStringPubkeyDSATbl[] = {
+		{ "ssh-dss", 7, CRYPT_ALGO_DSA },
+		{ NULL, 0, CRYPT_ALGO_NONE }
+		};
+//	int length;
+
+	int clientHelloLength = 0;
+	int serverHelloLength = 0;
+	BYTE clientHello[ 2000 ] = {0};
+	BYTE serverHello[ 2000 ] = {0};
+
+	if( ke_handshakeInfo != NULL ) return CRYPT_ERROR;
+
+	{
+		MESSAGE_CREATEOBJECT_INFO createInfo;
+
+		ke_handshakeInfo = malloc(sizeof(SSH_HANDSHAKE_INFO));
+		memset( ke_handshakeInfo, 0, sizeof( SSH_HANDSHAKE_INFO ) );
+		ke_handshakeInfo->iExchangeHashContext = ke_handshakeInfo->iServerCryptContext = CRYPT_ERROR;
+
+		initSSH2processing( &si, ke_handshakeInfo, TRUE );
+
+		/* SSHv2 hashes parts of the handshake messages for integrity-protection
+		   purposes, so if we're talking to an SSHv2 peer we create a context
+		   for the hash */
+		setMessageCreateObjectInfo( &createInfo, CRYPT_ALGO_SHA );
+		status = krnlSendMessage( SYSTEM_OBJECT_HANDLE, IMESSAGE_DEV_CREATEOBJECT,
+								  &createInfo, OBJECT_TYPE_CONTEXT );
+
+		if( !cryptStatusOK( status ) ) return( status );
+
+		if( cryptStatusOK( status ) ) ke_handshakeInfo->iExchangeHashContext = createInfo.cryptHandle;
+
+		/* Get the public-key algorithm that we'll be advertising to the client
+		   and set the algorithm table used for processing the client hello to
+		   only match the one that we're offering */
+		status = krnlSendMessage( sessionInfoPtr->privateKey,
+								  IMESSAGE_GETATTRIBUTE,
+								  &ke_handshakeInfo->pubkeyAlgo,
+								  CRYPT_CTXINFO_ALGO );
+
+		if( cryptStatusError( status ) ) return( status );
+
+		switch( ke_handshakeInfo->pubkeyAlgo )
+			{
+			case CRYPT_ALGO_RSA:
+				ke_handshakeInfo->algoStringPubkeyTbl = algoStringPubkeyRSATbl;
+				break;
+
+			case CRYPT_ALGO_DSA:
+				ke_handshakeInfo->algoStringPubkeyTbl = algoStringPubkeyDSATbl;
+				break;
+
+			default:
+//				assert( NOTREACHED );
+				return( CRYPT_ERROR_NOTAVAIL );
+			}
+	}
+
+
+
+
+	// save the client hello packet for hashing
+	clientHelloLength = stream->bufEnd + 1;
+	if( clientHelloLength < sizeof( clientHello ) && clientHelloLength > 16 )
+	{
+		clientHello[0] = 20;
+		memcpy( &clientHello[1], stream->buffer, clientHelloLength );
+	}
+	else return CRYPT_ERROR_OVERFLOW;
+	
+
+	/* Process the client hello packet */
+	status = processClientKexinit( &si, ke_handshakeInfo, *stream );
+	// if there's an incorrectly-guessed keyex we'll fail
+	if( !cryptStatusOK( status ) ) return( status );
+
+	/* Send the server hello packet:
+
+		byte		type = SSH2_MSG_KEXINIT
+		byte[16]	cookie
+		string		keyex algorithms
+		string		pubkey algorithms
+		string		client_crypto algorithms
+		string		server_crypto algorithms
+		string		client_mac algorithms
+		string		server_mac algorithms
+		string		client_compression algorithms = "none"
+		string		server_compression algorithms = "none"
+		string		client_language = ""
+		string		server_language = ""
+		boolean		first_keyex_packet_follows = FALSE
+		uint32		reserved = 0
+	*/
+	{
+		STREAM stream;
+		status = openPacketStreamSSH( &stream, sessionInfoPtr, SSH_MSG_KEXINIT );
+		if( cryptStatusError( status ) )
+			return( status );
+		status = exportVarsizeAttributeToStream( &stream, SYSTEM_OBJECT_HANDLE,
+										CRYPT_IATTRIBUTE_RANDOM_NONCE,
+										SSH2_COOKIE_SIZE );
+		if( cryptStatusError( status ) )
+			return( status );
+		writeAlgoList( &stream, algoKeyexList, typeSize(algoKeyexList) );
+		writeAlgoString( &stream, ke_handshakeInfo->pubkeyAlgo );
+		writeAlgoList( &stream, algoEncrList, typeSize(algoEncrList) );
+		writeAlgoList( &stream, algoEncrList, typeSize(algoEncrList) );
+		writeAlgoList( &stream, algoMACList, typeSize(algoMACList) );
+		writeAlgoList( &stream, algoMACList, typeSize(algoMACList) );
+		writeAlgoString( &stream, CRYPT_PSEUDOALGO_COPR );
+		writeAlgoString( &stream, CRYPT_PSEUDOALGO_COPR );
+		writeUint32( &stream, 0 );			/* No language tag */
+		writeUint32( &stream, 0 );
+		sputc( &stream, 0 );				/* Don't try and guess the keyex */
+		writeUint32( &stream, 0 );			/* Reserved */
+
+		// save t he serve hello
+		serverHelloLength = stream.bufEnd - 5;
+		if( serverHelloLength < sizeof( serverHello ) && serverHelloLength > 16 )
+			memcpy( serverHello, &stream.buffer[5], serverHelloLength );
+		else return CRYPT_ERROR_OVERFLOW;
+
+		status = sendPacketSSH2( sessionInfoPtr, &stream, FALSE );
+
+		// hash some data before disconnecting the stream
+		if( !cryptStatusError( status ) ) 
+			status = hashAsString( ke_handshakeInfo->iExchangeHashContext, ke_client_id, strlen( ke_client_id ) );
+		if( !cryptStatusError( status ) ) 
+			status = hashAsString( ke_handshakeInfo->iExchangeHashContext, SSH2_ID_STRING, strlen( SSH2_ID_STRING ) );
+		if( !cryptStatusError( status ) ) 
+			status = hashAsString( ke_handshakeInfo->iExchangeHashContext, clientHello, clientHelloLength );
+		if( !cryptStatusError( status ) ) 
+			status = hashAsString( ke_handshakeInfo->iExchangeHashContext, serverHello, serverHelloLength );
+		sMemDisconnect( &stream );
+	}
+
+	if( cryptStatusError( status ) )
+		return( status );
+
+
+
+	/* While we wait for the client to digest our hello and send back its
+	   response, create the context with the DH key */
+	status = initDHcontextSSH( &ke_handshakeInfo->iServerCryptContext,
+							   &ke_handshakeInfo->serverKeySize, NULL, 0,
+							   CRYPT_USE_DEFAULT );
+	if( cryptStatusError( status ) )
+		return( status );
+
+	return( CRYPT_OK );
+}
+
+static int ke_SSH2_MSG_NEWKEYS( SESSION_INFO *sessionInfoPtr )
+{
+	int status;
+
+
+	{
+		// send new keys packet
+		STREAM stream;
+		status = openPacketStreamSSH( &stream, sessionInfoPtr, 
+							 SSH_MSG_NEWKEYS );
+
+		status = sendPacketSSH2( sessionInfoPtr, &stream, FALSE );
+
+		if( cryptStatusError( status ) )
+			return( status );
+
+		sMemDisconnect( &stream );
+	}
+
+	/* Set up the security information required for the session */
+	status = initSecurityInfo( sessionInfoPtr, ke_handshakeInfo );
+
+	free(ke_handshakeInfo);
+	ke_handshakeInfo = NULL;
+
+	if( cryptStatusError( status ) )
+		return( status );
+
+	return CRYPT_OK;
+}
+
+static int ke_SSH2_MSG_KEXDH_GEX_REQUEST( SESSION_INFO *sessionInfoPtr,
+					   STREAM * stream1, int packetType )
+	{
+	STREAM stream;
+	BYTE *keyPtr = DUMMY_INIT_PTR;
+	void *keyexInfoPtr = DUMMY_INIT_PTR;
+	const int offset = LENGTH_SIZE + sizeofString32( "ssh-dh", 6 );
+	int keyPos, keyLength, keyexInfoLength, type, status;
+
+	/* Get the keyex key request from the client:
+
+		byte	type = SSH2_MSG_KEXDH_GEX_REQUEST_OLD
+		uint32	n (bits)
+
+	   or:
+
+		byte	type = SSH2_MSG_KEXDH_GEX_REQUEST_NEW
+		uint32	min (bits)
+		uint32	n (bits)
+		uint32	max (bits)
+
+	   Portions of the the request info are hashed later as part of the
+	   exchange hash, so we have to save a copy for then.  We save the
+	   original encoded form, because some clients send non-integral lengths
+	   that don't survive the conversion from bits to bytes */
+/*	length = readPacketSSH2( sessionInfoPtr,
+							 SSH2_MSG_KEXDH_GEX_REQUEST_OLD,
+							 ID_SIZE + UINT32_SIZE );
+	if( cryptStatusError( length ) )
+		return( length );
+*/	
+//	sMemConnect( &stream, sessionInfoPtr->receiveBuffer, length );
+	stream = *stream1;
+	type = packetType;
+
+	streamBookmarkSet( &stream, keyexInfoLength );
+	if( type == SSH_MSG_KEXDH_GEX_REQUEST_NEW )
+		{
+		/* It's a { min_length, length, max_length } sequence, save a copy
+		   and get the length value */
+		readUint32( &stream );
+		keyLength = readUint32( &stream );
+		status = readUint32( &stream );
+		}
+	else
+		/* It's a straight length, save a copy and get the length value */
+		status = keyLength = readUint32( &stream );
+	streamBookmarkComplete( &stream, &keyexInfoPtr, &keyexInfoLength, keyexInfoLength );
+//	sMemDisconnect( &stream );
+	if( cryptStatusError( status ) )
+		retExt( SESSION_ERRINFO, ( status, SESSION_ERRINFO, 
+				  "Invalid ephemeral DH key data request packet" ));
+	if( keyLength < bytesToBits( MIN_PKCSIZE ) || \
+		keyLength > bytesToBits( CRYPT_MAX_PKCSIZE ) )
+		retExt( SESSION_ERRINFO, ( CRYPT_ERROR_BADDATA, SESSION_ERRINFO, 
+				  "Client requested invalid ephemeral DH key size %d bits" ));
+	memcpy( ke_handshakeInfo->encodedReqKeySizes, keyexInfoPtr,
+			keyexInfoLength );
+	ke_handshakeInfo->encodedReqKeySizesLength = keyexInfoLength;
+	ke_handshakeInfo->requestedServerKeySize = bitsToBytes( keyLength );
+
+	/* If the requested key size differs too much from the built-in default
+	   one, destroy the existing default DH key and load a new one of the
+	   appropriate size.  Things get quite confusing here because the spec
+	   is a schizophrenic mix of two different documents, one that specifies
+	   the behaviour for the original message format which uses a single
+	   length value and a second one that specifies the behaviour for the
+	   { min, n, max } combination.  The range option was added as an
+	   attempted fix for implementations that couldn't handle the single
+	   size option, but the real problem is that the server knows what key
+	   sizes are appropriate but the client has to make the choice, without
+	   any knowledge of what the server can actually handle.  Because of
+	   this the spec (in its n-only mindset, which also applies to the
+	   min/n/max version since it's the same document) contains assorted
+	   weasel-words that allow the server to choose any key size it feels
+	   like if the client sends a range indication that's inappropriate.
+	   Although the spec ends up saying that the server can do anything it
+	   feels like ("The server should return the smallest group it knows
+	   that is larger than the size the client requested.  If the server
+	   does not know a group that is larger than the client request, then it
+	   SHOULD return the largest group it knows"), we use a least-upper-
+	   bound interpretation of the above, mostly because we store a range of
+	   fixed keys of different sizes and can always find something
+	   reasonably close to any (sensible) requested length */
+	if( ke_handshakeInfo->requestedServerKeySize < \
+										SSH2_DEFAULT_KEYSIZE - 16 || \
+		ke_handshakeInfo->requestedServerKeySize > \
+										SSH2_DEFAULT_KEYSIZE + 16 )
+		{
+		krnlSendNotifier( ke_handshakeInfo->iServerCryptContext,
+						  IMESSAGE_DECREFCOUNT );
+		status = initDHcontextSSH( &ke_handshakeInfo->iServerCryptContext,
+								   &ke_handshakeInfo->serverKeySize, NULL, 0,
+								   ke_handshakeInfo->requestedServerKeySize );
+		if( cryptStatusError( status ) )
+			return( status );
+		}
+
+	/* Send the DH key values to the client:
+
+		byte	type = SSH_MSG_KEXDH_GEX_GROUP
+		mpint	p
+		mpint	g
+
+	   Since this phase of the key negotiation exchanges raw key components
+	   rather than the standard SSH public-key format, we have to rewrite
+	   the public key before we can send it to the client.  What this 
+	   involves is stripping the:
+
+		uint32	length
+		string	"ssh-dh"
+
+	   header from the start of the key, which is accomplished by moving the
+	   key data down offset (= LENGTH_SIZE + sizeofString32( "ssh-dh", 6 ))
+	   bytes */
+	{
+		STREAM stream;
+		status = openPacketStreamSSH( &stream, sessionInfoPtr, SSH_MSG_KEXDH_GEX_GROUP );
+		if( cryptStatusError( status ) )
+			return( status );
+		streamBookmarkSet( &stream, keyPos );
+		status = exportAttributeToStream( &stream,
+										  ke_handshakeInfo->iServerCryptContext,
+										  CRYPT_IATTRIBUTE_KEY_SSH );
+		if( cryptStatusOK( status ) )
+			{
+			keyLength = keyPos;
+			streamBookmarkComplete( &stream, &keyPtr, &keyLength, keyLength );
+			}
+		if( cryptStatusError( status ) )
+			return( status );
+		memmove( keyPtr, keyPtr + offset, keyLength - offset );
+		sseek( &stream, keyPos + keyLength - offset );
+		status = sendPacketSSH2( sessionInfoPtr, &stream, FALSE );
+		sMemDisconnect( &stream );
+	}
+
+	return( status );
+}
+
+int ke_SSH2_MSG_KEXDH_INIT( SESSION_INFO *sessionInfoPtr, STREAM * stream1, int packetType )
+{
+	STREAM stream = * stream1;
+	KEYAGREE_PARAMS keyAgreeParams;
+	void *keyPtr, *dataPtr;
+	int keyLength, dataLength, sigLength, status;
+
+	/* Process the client keyex:
+
+		byte	type = SSH_MSG_KEXDH_INIT / SSH_MSG_KEXDH_GEX_INIT
+		mpint	y */
+	status = readRawObject32( &stream, ke_handshakeInfo->clientKeyexValue,
+							  MAX_ENCODED_KEYEXSIZE + 8,
+							  &ke_handshakeInfo->clientKeyexValueLength );
+	sMemDisconnect( &stream );
+	if( cryptStatusError( status ) || \
+		!isValidDHsize( ke_handshakeInfo->clientKeyexValueLength,
+						ke_handshakeInfo->serverKeySize, LENGTH_SIZE ) )
+		retExt( SESSION_ERRINFO, ( CRYPT_ERROR_BADDATA, SESSION_ERRINFO, 
+					  "Invalid DH phase 1 keyex value" ));
+	
+	/* Create the server DH value */
+	memset( &keyAgreeParams, 0, sizeof( KEYAGREE_PARAMS ) );
+	status = krnlSendMessage( ke_handshakeInfo->iServerCryptContext,
+							  IMESSAGE_CTX_ENCRYPT, &keyAgreeParams,
+							  sizeof( KEYAGREE_PARAMS ) );
+	if( cryptStatusError( status ) )
+		return( status );
+	sMemOpen( &stream, ke_handshakeInfo->serverKeyexValue,
+			  sizeof( ke_handshakeInfo->serverKeyexValue ) );
+	status = writeInteger32( &stream, keyAgreeParams.publicValue,
+							 keyAgreeParams.publicValueLen );
+	if( cryptStatusOK( status ) )
+		ke_handshakeInfo->serverKeyexValueLength = stell( &stream );
+	sMemDisconnect( &stream );
+	if( cryptStatusError( status ) )
+		return( status );
+
+	/* Build the DH phase 2 keyex packet:
+
+		byte		type = SSH_MSG_KEXDH_REPLY / SSH_MSG_KEXDH_GEX_REPLY
+		string		[ server key/certificate ]
+			string	"ssh-rsa"	"ssh-dss"
+			mpint	e			p
+			mpint	n			q
+			mpint				g
+			mpint				y
+		mpint		y'
+		string		[ signature of handshake data ]
+			string	"ssh-rsa"	"ssh-dss"
+			string	signature	signature
+		...
+
+	   The specification also makes provision for using X.509 and PGP keys,
+	   but only so far as to say that keys and signatures are in "X.509 DER"
+	   and "PGP" formats, neither of which actually explain what it is
+	   that's sent or signed (and no-one on the SSH list can agree on what
+	   they're supposed to look like), so we can't use either of them */
+	status = openPacketStreamSSH( &stream, sessionInfoPtr,
+						 ke_handshakeInfo->requestedServerKeySize ? \
+							SSH_MSG_KEXDH_GEX_REPLY : SSH_MSG_KEXDH_REPLY );
+	if( cryptStatusError( status ) )
+		{
+		sMemDisconnect( &stream );
+		return( status );
+		}
+	streamBookmarkSet( &stream, keyLength );
+	status = exportAttributeToStream( &stream, sessionInfoPtr->privateKey,
+									  CRYPT_IATTRIBUTE_KEY_SSH );
+	if( cryptStatusError( status ) )
+		{
+		sMemDisconnect( &stream );
+		return( status );
+		}
+	streamBookmarkComplete( &stream, &keyPtr, &keyLength, keyLength );
+	status = krnlSendMessage( ke_handshakeInfo->iExchangeHashContext,
+							  IMESSAGE_CTX_HASH, keyPtr, keyLength );
+	if( cryptStatusError( status ) )
+		{
+		sMemDisconnect( &stream );
+		return( status );
+		}
+	swrite( &stream, ke_handshakeInfo->serverKeyexValue,
+			ke_handshakeInfo->serverKeyexValueLength );
+
+	/* Complete phase 2 of the DH key agreement process to obtain the shared
+	   secret value */
+	status = completeKeyex( sessionInfoPtr, ke_handshakeInfo, TRUE );
+
+	if( cryptStatusError( status ) )
+		return( status );
+
+	/* 
+	status = sMemGetDataBlockRemaining( &stream, &dataPtr, &dataLength );
+	if( cryptStatusOK( status ) )
+	{
+		status = iCryptCreateSignature( dataPtr, 
+							min( sMemDataLeft( &stream ), MAX_INTLENGTH_SHORT - 1 ),
+							&sigLength,
+							CRYPT_IFORMAT_SSH, sessionInfoPtr->privateKey,
+							ke_handshakeInfo->iExchangeHashcontext,
+							CRYPT_UNUSED, CRYPT_UNUSED );
+	}
+	*/
+	/* Sign the hash.  The reason for the min() part of the expression is
+	   that iCryptCreateSignature() gets suspicious of very large buffer
+	   sizes, for example when the user has specified the use of a 1MB send
+	   buffer */
+	status = sMemGetDataBlockRemaining( &stream, &dataPtr, &dataLength );
+	if( cryptStatusOK( status ) )
+		{
+		status = iCryptCreateSignature( dataPtr, 
+							min( dataLength, MAX_INTLENGTH_SHORT - 1 ), 
+							&sigLength, CRYPT_IFORMAT_SSH, 
+							sessionInfoPtr->privateKey,
+							ke_handshakeInfo->iExchangeHashContext, NULL );
+		}
+	else return status;
+
+	krnlSendNotifier( ke_handshakeInfo->iExchangeHashContext,
+					  IMESSAGE_DECREFCOUNT );
+	ke_handshakeInfo->iExchangeHashContext = CRYPT_ERROR;
+	if( cryptStatusOK( status ) )
+		status = sSkip( &stream, sigLength );
+	if( cryptStatusOK( status ) )
+		status = wrapPacketSSH2( sessionInfoPtr, &stream, 0, FALSE, TRUE );
+	if( cryptStatusError( status ) )
+		{
+		sMemDisconnect( &stream );
+		return( status );
+		}
+
+	if( cryptStatusOK( status ) )
+		status = sendPacketSSH2( sessionInfoPtr, &stream, TRUE );
+
+	sMemDisconnect( &stream );
+	if( cryptStatusError( status ) )
+		return( status );
+
+	return( CRYPT_OK );
+}
+
+
+int ke_DH_ROUTER( SESSION_INFO *sessionInfoPtr, STREAM * stream1, int packetType )
+{
+	if( packetType == SSH_MSG_KEXINIT ) return ke_SSH2_MSG_KEXINIT( sessionInfoPtr, stream1 );
+
+	if( ke_handshakeInfo == NULL ) return CRYPT_ERROR_BADDATA;
+
+	if( packetType == SSH_MSG_NEWKEYS ) return ke_SSH2_MSG_NEWKEYS(sessionInfoPtr);
+//	if( ke_handshakeInfo->requestedServerKeySize > 0 )
+	{
+		if( packetType == SSH_MSG_KEXDH_GEX_REQUEST_OLD ) return ke_SSH2_MSG_KEXDH_GEX_REQUEST( sessionInfoPtr, stream1, packetType );
+	}
+
+	if( packetType == SSH_MSG_KEXDH_GEX_REQUEST_NEW ) return ke_SSH2_MSG_KEXDH_GEX_REQUEST( sessionInfoPtr, stream1, packetType );
+/* this will never get called as SSH2_MSG_KEXDH_GEX_REQUEST_OLD is the same number!!
+	if( packetType == SSH_MSG_KEXDH_INIT ) return ke_SSH2_MSG_KEXDH_INIT( sessionInfoPtr, stream1, packetType );
+*/
+	if( packetType == SSH_MSG_KEXDH_GEX_INIT ) return ke_SSH2_MSG_KEXDH_INIT( sessionInfoPtr, stream1, packetType );
+
+	return CRYPT_ERROR_BADDATA;
+
+}
+#endif
+
 /* Complete the handshake with the client */
 
 CHECK_RETVAL STDC_NONNULL_ARG( ( 1, 2 ) ) \
